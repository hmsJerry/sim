appDebug: true

server:
  port: ":1024"
jwt:
  signKey: sim

services:
  gateway:
    name: gateway
    loadBalance: true
    addr:
      - 127.0.0.1:10001
  user:
    name: user
    loadBalance: true
    host: 127.0.0.1
    port: 10002
#    addr:
#      - 127.0.0.1:10002
  im:
    name: im
    loadBalance: true
    host: 127.0.0.1
    port: 10002

mysql:
  host: 127.0.0.1
  port: 3306
  database: my_prod
  username: root
  password: root
  charset: utf8mb4
  prefix: my_

etcd:
  address: 127.0.0.1:2379

websocket:
  Start: 1                            # 默认不启动该服务（1=启动；0=不启动）
  WriteReadBufferSize: 20480          # 读写缓冲区分配字节，大概能存储 6800 多一点的文字
  MaxMessageSize: 65535               # 从消息管道读取消息的最大字节
  PingPeriod: 5                      #心跳包频率，单位：秒
  HeartbeatFailMaxTimes: 2            # 允许心跳失败的最大次数（默认设置为PingPeriod=30秒检测一次，连续4次没有心跳就会清除后端在线信息）
  ReadDeadline: 50                   # 客户端在线情况下，正常的业务消息间隔秒数必须小于该值，否则服务器将会主动断开，该值不能小于心跳频率*允许失败次数,单位：秒。 0 表示不设限制，即服务器不主动断开不发送任何消息的在线客户端，但会消耗服务器资源
  WriteDeadline: 35                   # 消息单次写入超时时间，单位：秒

rabbitMq:
  publishSubscribe:
    addr: amqp://账号:密码@127.0.0.1:5672//sim           #消息服务器地址、账号、密码
    exchangeType: "fanout"
    exchangeName: "fanout_exchange"                       #即时消息队列名称，
    delayedExchangeName: "delayed_fanout_exchange"        #延迟消息队列名称，必须事先在rabbitmq 服务器管理端手动创建
    durable: false                                        #消息是否持久化，如果初始化的是延迟消息队列,那么该参数会被程序强制设置为 true
    queueName: ""                                         #队列名称，为空 表示所有订阅的消费者（consumer）都可以接受到同样的消息，如果设置名称，会导致只有最后一个启动的消费者能接受到消息。
    consumerChanNumber: 1                                 #消费者通道数量（发布、订阅模式消费者使用一个通道，避免多个通道重复收到数据）
    offLineReconnectIntervalSec: 10                       #消费者掉线后,重连间隔的秒数
    retryCount: 5                                         #消费者掉线后,尝试重连最大次数

logs:
  ginLogName: "/storage/logs/gin.log"                   #设置 gin 框架的接口访问日志
  prodLogName: "/storage/logs/sim.log"                  #设置sim项目骨架运行时日志文件名，注意该名称不要与上一条重复 ,避免和 gin 框架的日志掺杂一起，造成混乱。
  textFormat: "json"                                    #记录日志的格式，参数选项：console、json ， console 表示一般的文本格式
  timePrecision: "millisecond"                          #记录日志时，相关的时间精度，该参数选项：second  、 millisecond ， 分别表示 秒 和 毫秒 ,默认为毫秒级别
  maxSize: 10                                           #每个日志的最大尺寸(以MB为单位）， 超过该值，系统将会自动进行切割
  maxBackups: 7                                         #保留旧日志最大个数
  maxAge: 15                                            #保留旧日志最大天数
  compress: false                                       #日志备份时，是否进行压缩